import { DataSource } from "typeorm";
import { config } from "dotenv";
import { Word } from "../src/words/word.entity";

// Load environment variables
config();

// Sample words for seeding
const sampleWords = [
  // Greetings
  { english: "Hello", vietnamese: "Xin ch√†o" },
  { english: "Goodbye", vietnamese: "T·∫°m bi·ªát" },
  { english: "Thank you", vietnamese: "C·∫£m ∆°n" },
  { english: "Sorry", vietnamese: "Xin l·ªói" },
  { english: "Please", vietnamese: "L√†m ∆°n" },

  // Common Verbs
  { english: "Go", vietnamese: "ƒêi" },
  { english: "Come", vietnamese: "ƒê·∫øn" },
  { english: "Eat", vietnamese: "ƒÇn" },
  { english: "Drink", vietnamese: "U·ªëng" },
  { english: "Study", vietnamese: "H·ªçc" },
  { english: "Work", vietnamese: "L√†m vi·ªác" },
  { english: "Sleep", vietnamese: "Ng·ªß" },
  { english: "Read", vietnamese: "ƒê·ªçc" },
  { english: "Write", vietnamese: "Vi·∫øt" },
  { english: "Speak", vietnamese: "N√≥i" },

  // Common Nouns
  { english: "Book", vietnamese: "S√°ch" },
  { english: "Table", vietnamese: "B√†n" },
  { english: "Chair", vietnamese: "Gh·∫ø" },
  { english: "House", vietnamese: "Nh√†" },
  { english: "Car", vietnamese: "Xe h∆°i" },
  { english: "Phone", vietnamese: "ƒêi·ªán tho·∫°i" },
  { english: "Computer", vietnamese: "M√°y t√≠nh" },
  { english: "Water", vietnamese: "N∆∞·ªõc" },
  { english: "Food", vietnamese: "Th·ª©c ƒÉn" },
  { english: "Friend", vietnamese: "B·∫°n b√®" },

  // Adjectives
  { english: "Good", vietnamese: "T·ªët" },
  { english: "Bad", vietnamese: "X·∫•u" },
  { english: "Big", vietnamese: "To" },
  { english: "Small", vietnamese: "Nh·ªè" },
  { english: "Fast", vietnamese: "Nhanh" },
  { english: "Slow", vietnamese: "Ch·∫≠m" },
  { english: "Happy", vietnamese: "Vui" },
  { english: "Sad", vietnamese: "Bu·ªìn" },
  { english: "Beautiful", vietnamese: "ƒê·∫πp" },
  { english: "Ugly", vietnamese: "X·∫•u" },

  // Numbers
  { english: "One", vietnamese: "M·ªôt" },
  { english: "Two", vietnamese: "Hai" },
  { english: "Three", vietnamese: "Ba" },
  { english: "Four", vietnamese: "B·ªën" },
  { english: "Five", vietnamese: "NƒÉm" },
  { english: "Ten", vietnamese: "M∆∞·ªùi" },
  { english: "Hundred", vietnamese: "TrƒÉm" },
  { english: "Thousand", vietnamese: "Ngh√¨n" },

  // Time
  { english: "Today", vietnamese: "H√¥m nay" },
  { english: "Tomorrow", vietnamese: "Ng√†y mai" },
  { english: "Yesterday", vietnamese: "H√¥m qua" },
  { english: "Morning", vietnamese: "Bu·ªïi s√°ng" },
  { english: "Afternoon", vietnamese: "Bu·ªïi chi·ªÅu" },
  { english: "Evening", vietnamese: "Bu·ªïi t·ªëi" },
  { english: "Night", vietnamese: "ƒê√™m" },
];

async function seed() {
  console.log("üå± Starting database seeding...");

  // Create data source
  const dataSource = new DataSource({
    type: "mysql",
    host: process.env.DB_HOST || "localhost",
    port: parseInt(process.env.DB_PORT) || 3306,
    username: process.env.DB_USERNAME || "root",
    password: process.env.DB_PASSWORD || "",
    database: process.env.DB_DATABASE || "english_learning",
    entities: [Word],
    synchronize: false,
  });

  try {
    // Initialize connection
    await dataSource.initialize();
    console.log("‚úÖ Database connection established");

    // Get repository
    const wordRepository = dataSource.getRepository(Word);

    // Clear existing data (optional)
    const existingCount = await wordRepository.count();
    if (existingCount > 0) {
      console.log(`‚ö†Ô∏è  Found ${existingCount} existing words`);
      const shouldClear = process.argv.includes("--clear");

      if (shouldClear) {
        await wordRepository.clear();
        console.log("üóëÔ∏è  Cleared existing words");
      } else {
        console.log(
          "‚ÑπÔ∏è  Keeping existing words. Use --clear flag to remove them."
        );
      }
    }

    // Insert sample words
    console.log(`üìù Inserting ${sampleWords.length} sample words...`);

    for (const wordData of sampleWords) {
      const word = wordRepository.create(wordData);
      await wordRepository.save(word);
    }

    const totalCount = await wordRepository.count();
    console.log(`‚úÖ Seeding completed! Total words in database: ${totalCount}`);
  } catch (error) {
    console.error("‚ùå Error during seeding:", error);
    process.exit(1);
  } finally {
    // Close connection
    await dataSource.destroy();
    console.log("üëã Database connection closed");
  }
}

// Run seeding
seed();
